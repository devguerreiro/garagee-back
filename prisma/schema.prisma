generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Building {
  public_id String  @id @unique @default(uuid())
  name      String
  cnpj      String  @unique
  towers    Tower[]
}

model Tower {
  public_id   String      @id @unique @default(uuid())
  identifier  String
  building_id String
  building    Building    @relation(fields: [building_id], references: [public_id])
  apartments  Apartment[]
}

model Apartment {
  public_id    String        @id @unique @default(uuid())
  identifier   String
  tower_id     String
  tower        Tower         @relation(fields: [tower_id], references: [public_id])
  occupant     User?
  parkingSpace ParkingSpace?
}

model User {
  public_id    String    @id @unique @default(uuid())
  name         String
  username     String    @unique
  password     String
  created_at   DateTime  @default(now())
  is_active    Boolean   @default(true)
  apartment_id String    @unique
  apartment    Apartment @relation(fields: [apartment_id], references: [public_id])
  bookings     Booking[]
}

model ParkingSpace {
  public_id    String    @id @unique @default(uuid())
  identifier   String
  guidance     String
  is_covered   Boolean
  is_blocked   Boolean   @default(false)
  apartment_id String    @unique
  apartment    Apartment @relation(fields: [apartment_id], references: [public_id])
  bookings     Booking[]
}

enum BookingStatus {
  PENDING
  APPROVED
  REFUSED
  REVOKED
}

model Booking {
  public_id        String        @id @unique @default(uuid())
  claimant_id      String
  claimant         User          @relation(fields: [claimant_id], references: [public_id])
  parking_space_id String
  parking_space    ParkingSpace  @relation(fields: [parking_space_id], references: [public_id])
  booked_at        DateTime      @default(now())
  booked_from      DateTime
  booked_to        DateTime
  updated_at       DateTime      @updatedAt
  status           BookingStatus @default(PENDING)
}
